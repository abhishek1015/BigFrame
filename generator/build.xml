<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="jar" name="bigframe">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="/usr/lib/eclipse"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
	
	
	
	<!-- Variable -->
	<!-- Name tags -->
	<property name="Name" value="BigFrame" />
	<property name="name" value="bigframe" />
	<property name="bigframe.version" value="0.1.0" />
	<!--<property name="final.name" value="${name}-${bigframe.version}" />-->
	<property name="final.name" value="${name}" />
	<property name="year" value="2013" />

	<!-- Source directories -->
	<property name="src.dir" value="${basedir}/src/main" />
	<property name="test.dir" value="${basedir}/src/test" />
	<property name="resource.dir" value="${basedir}/src/resource" />


	<!-- Lib directories -->
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="lib.common.dir" value="${lib.dir}/common" />
	
	<!-- Project directories -->
	<property name="bin.dir" value="${basedir}/bin" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="build.dir.main" value="${basedir}/build/main" />
	<property name="build.dir.test" value="${basedir}/build/test" />
	<property name="conf.dir" value="${basedir}/conf" />
	<property name="docs.dir" value="${basedir}/docs" />
	<property name="tools.dir" value="${basedir}/tools" />

	<!-- Contrib  -->
	<property name="contrib.dir" value="${basedir}/contrib" />


	<!-- Javadoc properties -->
	<property name="javadoc.dir" value="${docs.dir}/api" />
	<property name="javadoc.link.java" value="http://docs.oracle.com/javase/6/docs/api/" />
	<property name="javadoc.packages" value="bigframe.*" />

	<!-- Javac properties -->
	<property name="javac.debug" value="on" />
	<property name="javac.optimize" value="on" />
	<property name="javac.deprecation" value="off" />
	<property name="javac.version" value="1.6" />
	<property name="javac.args" value="" />
	<property name="javac.args.warnings" value="-Xlint:unchecked" />
	<property name="javac.encoding" value="ISO-8859-1" />

	<!-- Jar files -->
	<property name="jars.dir" value="${basedir}/jars" />
	<property name="bigframe.jar" value="${jars.dir}/${final.name}.jar" />

	
    <path id="bigframe.classpath">
		<pathelement location="${build.dir}" />
		<fileset dir="${lib.common.dir}" includes="*.jar" />
    </path>
	
	
	<!-- ====================================================== -->
	<!-- Stuff needed by all targets                            -->
	<!-- ====================================================== -->
		
	<target name="init">
		<mkdir dir="${build.dir.main}" />
		<mkdir dir="${build.dir.test}" />
		<mkdir dir="${jars.dir}" />

	</target>
	
	<!-- ====================================================== -->
	<!-- Compile the Java files                                 -->
	<!-- ====================================================== -->
	
	<target name="compile" 
		depends="init,
		 	 compile-bigframe-classes"
		description="Compile the entire project">
	</target>

	
	<!-- ====================================================== -->
	<!-- Compile the Bigframe files                               -->
	<!-- ====================================================== -->
	
	<target name="compile-bigframe-classes">
		<javac includeantruntime="false" 
			encoding="${javac.encoding}" 
			srcdir="${src.dir}"
			includes="java/bigframe/**/*.java" 
			destdir="${build.dir.main}" 
			debug="${javac.debug}" 
			optimize="${javac.optimize}" 
			target="${javac.version}" 
			source="${javac.version}" 
			deprecation="${javac.deprecation}">

			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="bigframe.classpath" />
		</javac>
	</target>
	


	
	<target name="jar" 
		depends="compile,
		 		bigframe_jar" 
		description="Creates the bigframe jars">
	</target>

	<target name="bigframe_jar" depends="compile" description="Creates the profiler jar">
		<jar jarfile="${bigframe.jar}">		
			<fileset dir="${build.dir.main}">
				<include name="bigframe/**/*.class" />
			</fileset>
			
		
			<fileset dir="${resource.dir}"/>
			
			<zipgroupfileset dir="${lib.dir}" includes="**/*.jar" />
			
			<manifest>
			  <attribute name="Main-Class"
			             value="bigframe.BigFrameDriver" />
			</manifest>
		</jar>
		<!--
        <one-jar destfile="${bigframe.jar}" onejarmainclass="edu.bigframe.BigFrameDriver">
            <main>
    			<fileset dir="${build.dir}">
    				<include name="edu/bigframe/**/*.class" />
    			</fileset>
            	<fileset dir="${resource.dir}"/>
            </main>
            <lib>
                <fileset dir="${lib.dir}" />
            </lib>
        </one-jar>
		-->
	</target>
	

	
	<!-- ================================================================== -->
	<!-- JUnit Testing                                                      -->
	<!-- ================================================================== -->
	
    <target name="compile-test" depends="compile" description="Compile test classes" >
                <javac includeantruntime="false"
                        encoding="${javac.encoding}"
                        srcdir="${test.dir}"
                        includes="java/bigframe/**/*.java"
                        destdir="${build.dir.test}"
                        debug="${javac.debug}"
                        optimize="${javac.optimize}"
                        target="${javac.version}"
                        source="${javac.version}"
                        deprecation="${javac.deprecation}">
                        <compilerarg line="${javac.args} ${javac.args.warnings}" />
                        <classpath refid="bigframe.classpath" />
                </javac>
    </target>

	
	<target name="test" depends="compile-test" description="Performs all junit tests for BigFrame">
  		<junit fork="yes" haltonfailure="yes">
			<batchtest fork="yes" >
				<fileset dir="${build.dir.test}">
					<include name="bigframe/**/junit/Test*.class" />
				</fileset>
			</batchtest>
			<formatter type="plain" usefile="false" />
			<classpath refid="bigframe.classpath" />
		</junit>
	</target>
	
	<!-- ================================================================== -->
	<!-- Documentation                                                      -->
	<!-- ================================================================== -->

	<target name="javadoc" depends="compile" description="Generate javadoc">
		<mkdir dir="${javadoc.dir}" />
		<javadoc
			overview="${src.dir}/overview.html"
			packagenames="${javadoc.packages}"
			destdir="${javadoc.dir}"
			author="true"
			version="true"
			use="true"
			windowtitle="${Name} ${bigframe.version} API"
			doctitle="${Name} ${bigframe.version} API"
			nodeprecated="false" 
			nodeprecatedlist="false" 
			noindex="false" 
			nonavbar="false" 
			notree="false" 
			splitindex="true" 
			>
			
			<packageset dir="${src.dir}" />

			<link href="${javadoc.link.java}" />

			<classpath>
				<path refid="bigframe.classpath" />
				<pathelement path="${java.class.path}" />
			</classpath>
			
		</javadoc>
	</target>

	<!-- ================================================================== -->
	<!-- package.  Packages the project for distribution                    -->
	<!-- ================================================================== -->

	<!-- package command: Packages the project for distribution -->
	<target name="package" 
			depends="compile, jar, javadoc"
			description="Packages the project for distribution">
		<delete dir="${final.name}" />
		<mkdir  dir="${final.name}" />

		<copy todir="${final.name}" file="LICENSE.txt" verbose="false" />
		<copy todir="${final.name}" file="README" verbose="false" />

		<copy todir="${final.name}/bin" verbose="false">
			<fileset dir="${bin.dir}" />
		</copy>
		<chmod file="${final.name}/bin/*" perm="a+x"/>


		<copy todir="${final.name}/conf" verbose="false">
			<fileset dir="${conf.dir}" />
		</copy>

		<copy todir="${final.name}/docs" verbose="false">
			<fileset dir="${docs.dir}" includes="**/*" />
		</copy>

		<copy todir="${final.name}/jars" verbose="false">
			<fileset dir="${jars.dir}" />
		</copy>

		<copy todir="${final.name}/tools" verbose="false">
			<fileset dir="${tools.dir}" includes="*/**" />
		</copy>

	</target>

	<!-- ================================================================== -->
	<!-- Build contrib and visualizer projects                              -->
	<!-- ================================================================== -->

	<!-- build_all: Builds BigFrame, contrib projects, and visualizer -->
	<target name="build_all" 
			depends="compile, jar"
			description="Builds BigFrame">
	</target>


	<!-- ================================================================== -->
	<!-- Clean.  Delete the build files, and their directories              -->
	<!-- ================================================================== -->
	
	<target name="clean" description="Delete the build directory">
		<delete dir="${build.dir}" />
		<delete dir="${javadoc.dir}" />
		<delete dir="${jars.dir}" />
	</target>

	<!-- clean_all: Cleans BigFrame, contrib projects, and visualizer -->
	<target name="clean_all" 
			depends="clean"
			description="Cleans BigFrame">
	</target>


	<!-- ================================================================== -->
	<!-- Auxiliary commands                                                 -->
	<!-- ================================================================== -->

	<!-- help command: Prints help information-->
	<target name="help" description="Prints help information">
		<exec executable="ant">
			<arg value="-projecthelp" />
		</exec>
	</target>

	<!-- eclipse command: Set up project for use with eclipse-->
	<target name="eclipse" description="Set up project for use with eclipse">
		<echo message="Setting up project for use with eclipse" />
		<copy file="${basedir}/.eclipse-templates/.classpath" 
			  tofile="${basedir}/.classpath"
			  overwrite="true" verbose="false" />
		<copy file="${basedir}/.eclipse-templates/.project" 
			  tofile="${basedir}/.project"
			  overwrite="true" verbose="false" />
	</target>
</project>
